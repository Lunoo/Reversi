{"version":3,"sources":["containers/UserPanel/UserPanel.module.scss","components/Disk/Disk.module.scss","components/Square/Square.module.scss","containers/Board/Board.module.scss","assets/images sync /^/.*$","containers/Header/Header.module.scss","assets/images/black-icon.jpg","assets/images/robot-black-icon.png.png","assets/images/robot-white-icon.png","assets/images/white-icon.jpg","assets/images/wood-bg.jpg","containers/Header/Header.js","components/Disk/Disk.js","components/Square/Square.js","containers/Board/board-utils.js","store/store.js","containers/Board/Board.js","containers/Board/robot-newbie.js","containers/UserPanel/UserPanel.js","App.js","serviceWorker.js","store/players-store.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Header","className","styles","header","Component","disk","props","classes","wrapper","color","join","front","back","side","Array","spoke","i","key","square","isMarked","push","withMark","isValidMove","validMove","mayBeCaptured","onClick","clicked","onMouseOver","hover","onMouseLeave","blur","isNotEmpty","Disk","copyBoardState","state","newState","values","forEach","isSquareNotEmpty","boardState","getAllValidMovesForPlayer","nextPlayerColor","possibleMoves","y","x","getKey","currentPlayerColor","getNextPlayer","getAllCapturedDisksWithColor","length","neighbors","getAllNeighborsWithColor","capturedDisks","addedDisks","vector","squareToCheck","currentPlayer","globalState","listeners","actions","useStore","setState","useState","useEffect","filter","li","actionName","payload","listener","Board","players","dispatch","isCurrentPlayerHuman","isHuman","33","44","34","43","squares","setSquares","validMoves","setValidMoves","showCapturedDisks","showValidMove","newBoardState","newColor","squaresToBeCaptured","hideCapturedDisks","includes","squareClicked","useCallback","nextPlayer","newTotalScore","boardStateArray","totalDisks","blackScore","reduce","sum","black","white","changeTotalScore","setTotalScore","timeout","nextMove","playerColor","moves","moveKey","captured","maxCapturedValue","Math","max","move","randomMoveIndex","floor","random","getNextMove","setTimeout","clearTimeout","squaresArr","squareState","Square","boardContainer","board","data-player","UserPanel","userPanel","playerBlock","active","src","require","icon","alt","nickname","totalScoreBlock","totalScore","squareBlock","BG_CLASSES","App","getRandomItemFromArray","arr","document","body","classList","add","this","Boolean","window","location","hostname","match","userActions","initialState","curState","player","configurePlayersStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1f3fc81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPanel\":\"UserPanel_userPanel__HC_aB\",\"playerBlock\":\"UserPanel_playerBlock__FBiMm\",\"black\":\"UserPanel_black__3GEvs\",\"white\":\"UserPanel_white__bVY1N\",\"active\":\"UserPanel_active__2W2UT\",\"totalScoreBlock\":\"UserPanel_totalScoreBlock__Roy3U\",\"totalScore\":\"UserPanel_totalScore__3fmfC\",\"squareBlock\":\"UserPanel_squareBlock__1QBMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Disk_wrapper__1qe-e\",\"disk\":\"Disk_disk__ZzxAB\",\"white\":\"Disk_white__21JwF\",\"black\":\"Disk_black__kSe-k\",\"front\":\"Disk_front__2jHMx\",\"back\":\"Disk_back__1NR7I\",\"side\":\"Disk_side__1RV_v\",\"spoke\":\"Disk_spoke__D4k14\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__1AiCK\",\"withMark\":\"Square_withMark__3oTPS\",\"validMove\":\"Square_validMove__2eHfV\",\"mayBeCaptured\":\"Square_mayBeCaptured__3IWs9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boardContainer\":\"Board_boardContainer__3ew5_\",\"board\":\"Board_board__2vvwL\",\"totalScore\":\"Board_totalScore__2IAP_\",\"black\":\"Board_black__3K0FP\"};","var map = {\n\t\"./black-icon.jpg\": 24,\n\t\"./robot-black-icon.png.png\": 25,\n\t\"./robot-white-icon.png\": 26,\n\t\"./white-icon.jpg\": 27,\n\t\"./wood-bg.jpg\": 28\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 14;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2ONRg\"};","module.exports = __webpack_public_path__ + \"static/media/black-icon.ba59a848.jpg\";","module.exports = __webpack_public_path__ + \"static/media/robot-black-icon.png.15e05fad.png\";","module.exports = __webpack_public_path__ + \"static/media/robot-white-icon.26ab1b8c.png\";","module.exports = __webpack_public_path__ + \"static/media/white-icon.ba010b87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wood-bg.ac610868.jpg\";","import React, {Component} from 'react';\r\n\r\nimport styles from './Header.module.scss';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className={styles.header}>\r\n                Reversi\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport styles from './Disk.module.scss';\r\n\r\nconst FACETS = 32;\r\n\r\nconst disk = (props) => {\r\n    const classes = [styles.wrapper, styles[props.color]];\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <div className={styles.disk}>\r\n                <div className={styles.front}/>\r\n                <div className={styles.back}/>\r\n                <div className={styles.side}>\r\n                    {[...Array(FACETS)].map((spoke, i) => {\r\n                        return <div key={i} className={styles.spoke}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default disk;","import React from 'react';\r\n\r\nimport styles from './Square.module.scss';\r\nimport Disk from '../Disk/Disk';\r\n\r\nconst square = (props) => {\r\n    const classes = [styles.square];\r\n    if (props.isMarked) {\r\n        classes.push(styles.withMark);\r\n    }\r\n    if (props.isValidMove) {\r\n        classes.push(styles.validMove);\r\n    }\r\n    if (props.mayBeCaptured) {\r\n        classes.push(styles.mayBeCaptured);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            onClick={props.clicked}\r\n            onMouseOver={props.hover}\r\n            onMouseLeave={props.blur}\r\n        >\r\n            {props.isNotEmpty && <Disk color={props.color}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default square;\r\n","const BOARD_SIZE = 8;\r\n\r\nexport const copyBoardState = (state) => {\r\n    const newState = {...state};\r\n    Object.values(newState).forEach((square) => {\r\n        newState[square.key] = {...square};\r\n    });\r\n\r\n    return newState;\r\n};\r\n\r\nexport const isSquareNotEmpty = (boardState, key) => {\r\n    return !!boardState[key]?.isNotEmpty;\r\n};\r\n\r\nexport const getAllValidMovesForPlayer = (boardState, nextPlayerColor) => {\r\n    const possibleMoves = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n        for (let x = 0; x < BOARD_SIZE; x++) {\r\n            const key = getKey(x, y);\r\n\r\n            if (isSquareNotEmpty(boardState, key)) {\r\n                // skip the already taken squares\r\n                continue;\r\n            }\r\n\r\n            // next player will capture disks with a color equal to currentPlayerColor\r\n            const currentPlayerColor = getNextPlayer(nextPlayerColor);\r\n            const capturedDisks = getAllCapturedDisksWithColor(boardState, key, currentPlayerColor);\r\n            // check if the player has valid moves\r\n            if (capturedDisks.length > 0) {\r\n                possibleMoves.push(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    return possibleMoves;\r\n};\r\n\r\nexport const getAllCapturedDisksWithColor = (boardState, key, color) => {\r\n    // get all possible directions (neighbors) for capturing disks\r\n    const neighbors = getAllNeighborsWithColor(boardState, key, color);\r\n\r\n    let capturedDisks = [];\r\n    neighbors.forEach((square) => {\r\n        const addedDisks = [];\r\n        // calculate actual direction\r\n        const vector = square.key - key;\r\n\r\n        let squareToCheck = square;\r\n        // looking for a player color disc or an empty square or the end of the board\r\n        while (squareToCheck && squareToCheck.color === square.color) {\r\n            addedDisks.push({...squareToCheck});\r\n            squareToCheck = boardState[squareToCheck.key + vector];\r\n        }\r\n\r\n        if (squareToCheck) {\r\n            // if such a disk is located - add all the passed disks to the array of captured\r\n            capturedDisks = [\r\n                ...capturedDisks,\r\n                ...addedDisks\r\n            ]\r\n        }\r\n    });\r\n\r\n    return capturedDisks;\r\n};\r\n\r\nconst getAllNeighborsWithColor = (boardState, key, color) => {\r\n    const neighbors = [];\r\n    for (let y = -1; y <= 1; y++) {\r\n        for (let x = -1; x <= 1; x++) {\r\n            const vector = getKey(x, y);\r\n            const square = boardState[key + vector];\r\n            if (square && square.key !== key && square.color === color) {\r\n                neighbors.push({...square})\r\n            }\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nexport const getKey = (x, y) => {\r\n    return x * 10 + y;\r\n};\r\n\r\nexport const getNextPlayer = (currentPlayer) => {\r\n    return currentPlayer === 'black' ? 'white' : 'black';\r\n};","import {useEffect, useState} from 'react'\r\n\r\nlet globalState = {};\r\nlet listeners = [];\r\nlet actions = {};\r\n\r\nexport const useStore = () => {\r\n    const setState = useState(globalState)[1];\r\n\r\n    const dispatch = (actionName, payload) => {\r\n        const newState = actions[actionName](globalState, payload);\r\n        globalState = {...globalState, ...newState};\r\n\r\n        for (const listener of listeners) {\r\n            listener(globalState);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        listeners.push(setState);\r\n\r\n        return () => {\r\n            listeners = listeners.filter(li => li !== setState);\r\n        }\r\n    }, [setState]);\r\n\r\n    return [globalState, dispatch];\r\n};\r\n\r\nexport const initStore = (userActions, initialState) => {\r\n    if (initialState) {\r\n        globalState = {...globalState, ...initialState};\r\n        actions = {...actions, ...userActions};\r\n    }\r\n};","import React, {useState, useEffect, useCallback} from 'react';\r\n\r\nimport styles from './Board.module.scss';\r\nimport Square from '../../components/Square/Square';\r\nimport {\r\n    copyBoardState, getAllCapturedDisksWithColor, getAllValidMovesForPlayer, getKey, getNextPlayer\r\n} from './board-utils';\r\nimport {getNextMove} from './robot-newbie';\r\nimport {useStore} from '../../store/store';\r\n\r\nconst BOARD_SIZE = 8;\r\n\r\nconst Board = props => {\r\n    const [{currentPlayer, players}, dispatch] = useStore();\r\n    const isCurrentPlayerHuman = players[currentPlayer]?.isHuman;\r\n\r\n    const [squares, setSquares] = useState(\r\n        {\r\n            33: {\r\n                key: 33,\r\n                isNotEmpty: true,\r\n                color: 'white',\r\n                mayBeCaptured: false\r\n            },\r\n            44: {\r\n                key: 44,\r\n                isNotEmpty: true,\r\n                color: 'white',\r\n                mayBeCaptured: false\r\n            },\r\n            34: {\r\n                key: 34,\r\n                isNotEmpty: true,\r\n                color: 'black',\r\n                mayBeCaptured: false\r\n            },\r\n            43: {\r\n                key: 43,\r\n                isNotEmpty: true,\r\n                color: 'black',\r\n                mayBeCaptured: false\r\n            }\r\n        }\r\n    );\r\n    const [validMoves, setValidMoves] = useState([32, 23, 54, 45]);\r\n\r\n    const changeTotalScore = (boardState) => {\r\n        const boardStateArray = Object.values(boardState);\r\n        const totalDisks = boardStateArray.length;\r\n        let blackScore = boardStateArray.reduce((sum, square) => {\r\n            return square.color === 'black' ? sum + 1 : sum;\r\n        }, 0);\r\n\r\n        return {\r\n            black: blackScore,\r\n            white: totalDisks - blackScore\r\n        };\r\n    };\r\n\r\n    const showCapturedDisks = (key) => {\r\n        if (!showValidMove(key)) {\r\n            return;\r\n        }\r\n\r\n        const newBoardState = copyBoardState(squares);\r\n        const newColor = getNextPlayer(currentPlayer);\r\n        const squaresToBeCaptured = getAllCapturedDisksWithColor(newBoardState, key, newColor);\r\n\r\n        if (!squaresToBeCaptured.length) {\r\n            return;\r\n        }\r\n\r\n        squaresToBeCaptured.forEach((square) => {\r\n            newBoardState[square.key].mayBeCaptured = true;\r\n        });\r\n\r\n        setSquares(newBoardState);\r\n    };\r\n\r\n    const hideCapturedDisks = () => {\r\n        if (!isCurrentPlayerHuman) {\r\n            return;\r\n        }\r\n\r\n        const newBoardState = copyBoardState(squares);\r\n        Object.values(newBoardState).forEach((square) => {\r\n            square.mayBeCaptured = false;\r\n        });\r\n\r\n        setSquares(newBoardState);\r\n    };\r\n\r\n    const showValidMove = (key) => {\r\n        return isCurrentPlayerHuman && validMoves.includes(key);\r\n    };\r\n\r\n    const squareClicked = useCallback((key, isCurrentPlayerHuman) => {\r\n        if (!isCurrentPlayerHuman || !validMoves.includes(key)) {\r\n            return;\r\n        }\r\n\r\n        let nextPlayer = getNextPlayer(currentPlayer);\r\n        const newBoardState = copyBoardState(squares);\r\n        const capturedDisks = getAllCapturedDisksWithColor(newBoardState, key, nextPlayer);\r\n\r\n        // add new disk\r\n        newBoardState[key] = {\r\n            key: key,\r\n            isNotEmpty: true,\r\n            color: currentPlayer\r\n        };\r\n\r\n        // change color of captured disks\r\n        capturedDisks.forEach((disk) => {\r\n            newBoardState[disk.key].color = currentPlayer;\r\n            newBoardState[disk.key].mayBeCaptured = false;\r\n        });\r\n\r\n        // update allowable squares for the next player\r\n        let possibleMoves = getAllValidMovesForPlayer(newBoardState, nextPlayer);\r\n\r\n        if (!possibleMoves.length) {\r\n            // a player changes only if he has valid moves\r\n            nextPlayer = currentPlayer;\r\n            possibleMoves = getAllValidMovesForPlayer(newBoardState, nextPlayer);\r\n\r\n            if (!possibleMoves.length) {\r\n                // if both players cannot move - the game is over\r\n                nextPlayer = null;\r\n            }\r\n        }\r\n\r\n        // provide totalScore to UserPanel\r\n        const newTotalScore = changeTotalScore(newBoardState);\r\n        props.setTotalScore(newTotalScore);\r\n\r\n        dispatch('PLAYER_CHANGED', nextPlayer);\r\n        setSquares(newBoardState);\r\n        setValidMoves(possibleMoves);\r\n    }, [currentPlayer, props, validMoves, squares, dispatch]);\r\n\r\n    useEffect(() => {\r\n        let timeout;\r\n        if (isCurrentPlayerHuman === false) {\r\n            const nextPlayer = getNextPlayer(currentPlayer);\r\n            const newBoardState = copyBoardState(squares);\r\n\r\n            const nextMove = getNextMove(validMoves, newBoardState, nextPlayer);\r\n            if (typeof nextMove !== 'number') {\r\n                return;\r\n            }\r\n\r\n            timeout = setTimeout(() => {\r\n                squareClicked(nextMove, true);\r\n            }, 1000);\r\n        }\r\n\r\n        return () => {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n            }\r\n        }\r\n    }, [currentPlayer, isCurrentPlayerHuman, squares, validMoves, squareClicked]);\r\n\r\n    const squaresArr = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n        for (let x = 0; x < BOARD_SIZE; x++) {\r\n            const key = getKey(x, y);\r\n            const squareState = squares[key];\r\n\r\n            squaresArr.push(\r\n                <Square isMarked={[2, 6].includes(x) && [2, 6].includes(y)}\r\n                        key={key}\r\n                        isValidMove={showValidMove(key) ? currentPlayer : null}\r\n                        isNotEmpty={squareState?.isNotEmpty}\r\n                        mayBeCaptured={squareState?.mayBeCaptured}\r\n                        color={squareState?.color}\r\n                        hover={() => showCapturedDisks(key)}\r\n                        blur={hideCapturedDisks}\r\n                        clicked={() => squareClicked(key, isCurrentPlayerHuman)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.boardContainer}>\r\n            <div className={styles.board}\r\n                 data-player={currentPlayer}>\r\n                {squaresArr}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import {getAllCapturedDisksWithColor} from './board-utils';\r\n\r\nexport const getNextMove = (possibleMoves, boardState, playerColor) => {\r\n    let moves = [];\r\n    possibleMoves.forEach(\r\n        (moveKey) => {\r\n            const capturedDisks = getAllCapturedDisksWithColor(boardState, moveKey, playerColor);\r\n\r\n            // get number of captured disks for each valid step\r\n            moves.push({\r\n                key: moveKey,\r\n                captured: capturedDisks.length\r\n            });\r\n        }\r\n    );\r\n\r\n    const maxCapturedValue = Math.max(...moves.map(move => move.captured));\r\n\r\n    // get all moves with max number of captured disks\r\n    moves = moves.filter(move => move.captured === maxCapturedValue);\r\n\r\n    if (moves.length) {\r\n        // choose random move the current array\r\n        const randomMoveIndex = Math.floor(Math.random() * moves.length);\r\n        return moves[randomMoveIndex].key;\r\n    } else {\r\n        return null;\r\n    }\r\n};","import React from 'react';\r\n\r\nimport styles from './UserPanel.module.scss';\r\nimport Square from '../../components/Square/Square';\r\nimport {useStore} from '../../store/store';\r\n\r\nconst UserPanel = props => {\r\n    const {players, currentPlayer} = useStore()[0];\r\n\r\n    return (\r\n        <div className={styles.userPanel}>\r\n            <figure className={[styles.playerBlock, styles.black, currentPlayer === 'black' ? styles.active : ''].join(' ')}>\r\n                <img src={require(`../../assets/images/${players.black.icon}`)} alt=\"black\"/>\r\n                <figcaption>{players.black.nickname}</figcaption>\r\n            </figure>\r\n\r\n            <div className={styles.totalScoreBlock}>\r\n                <div className={styles.totalScore}>\r\n                    <div className={styles.squareBlock}>\r\n                        <Square isNotEmpty color={'black'}/>\r\n                        {props.totalScore.black}\r\n                    </div>\r\n\r\n                    <div className={styles.squareBlock}>\r\n                        <Square isNotEmpty color={'white'}/>\r\n                        {props.totalScore.white}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <figure className={[styles.playerBlock, styles.white, currentPlayer === 'white' ? styles.active : ''].join(' ')}>\r\n                <img src={require(`../../assets/images/${players.white.icon}`)} alt=\"white\"/>\r\n                <figcaption>{players.white.nickname}</figcaption>\r\n            </figure>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserPanel;","import React, {Component} from 'react';\n\nimport './App.scss';\nimport Header from './containers/Header/Header';\nimport Board from './containers/Board/Board';\nimport UserPanel from './containers/UserPanel/UserPanel';\n\nconst BG_CLASSES = ['green']; // ['blue', 'green']\n\nclass App extends Component {\n    state = {\n        totalScore: {\n            black: 2,\n            white: 2\n        }\n    };\n\n    getRandomItemFromArray = (arr) => {\n        const index = Math.floor(Math.random() * arr.length);\n        return arr[index];\n    };\n\n    setTotalScore = (newTotalScore) => {\n        this.setState({\n            totalScore: newTotalScore\n        });\n    };\n\n    render() {\n        document.body.classList.add(this.getRandomItemFromArray(BG_CLASSES));\n        return (\n            <div className=\"app\">\n                <Header/>\n                <Board setTotalScore={this.setTotalScore}/>\n                <UserPanel totalScore={this.state.totalScore}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {initStore} from './store';\r\n\r\nconst configureStore = () => {\r\n    const actions = {\r\n        'PLAYER_CHANGED': (curState, player) => {\r\n            return {currentPlayer: player}\r\n        }\r\n    };\r\n\r\n    initStore(actions, {\r\n        currentPlayer: 'black',\r\n        players: {\r\n            black: {\r\n                color: 'black',\r\n                icon: 'black-icon.jpg',\r\n                isHuman: true,\r\n                nickname: 'Human'\r\n            },\r\n            white: {\r\n                color: 'white',\r\n                icon: 'robot-white-icon.png',\r\n                isHuman: false,\r\n                nickname: 'Robot'\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configurePlayersStore from './store/players-store';\n\nconfigurePlayersStore();\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}