{"version":3,"sources":["containers/UserPanel/UserPanel.module.scss","components/Disk/Disk.module.scss","components/PlayerCard/PlayerCard.module.scss","shared/Dialog/Dialog.module.scss","components/Square/Square.module.scss","containers/Board/Board.module.scss","App.module.scss","containers/Header/Header.module.scss","assets/images sync /^/.*$","assets/images/black-icon.jpg","assets/images/robot-black-icon.png","assets/images/robot-white-icon.png","assets/images/white-icon.jpg","assets/images/wood-bg.jpg","components/Disk/Disk.js","components/PlayerCard/PlayerCard.js","shared/Dialog/Dialog.js","store/store.js","components/ResultsDialog/ResultsDialog.js","components/Square/Square.js","containers/Board/board-utils.js","containers/Board/Board.js","containers/Board/robot-newbie.js","containers/Header/Header.js","containers/UserPanel/UserPanel.js","App.js","serviceWorker.js","store/players.store.js","store/game-settings.store.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Disk","props","classes","styles","wrapper","color","className","join","disk","front","back","side","Array","spoke","i","key","PlayerCard","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","playerCard","active","src","require","icon","alt","nickname","Transition","React","forwardRef","ref","Grow","CustomDialogTitle","children","onClose","other","DialogTitle","disableTypography","header","Typography","variant","IconButton","aria-label","closeButton","onClick","Dialog","open","isOpen","TransitionComponent","dialog","handleClose","aria-labelledby","aria-describedby","headerText","DialogContent","content","dividers","DialogContentText","globalState","listeners","actions","useStore","shouldListen","setState","useState","dispatch","actionName","payload","newState","listener","useEffect","push","filter","li","initStore","userActions","initialState","ResultsDialog","totalScore","currentPlayer","players","showDialog","setShowDialog","message","setMessage","getResultsMessage","useCallback","black","white","openDialog","Square","square","isMarked","withMark","isValidMove","validMove","mayBeCaptured","clicked","onMouseOver","hover","onMouseLeave","blur","isNotEmpty","copyBoardState","state","values","forEach","isSquareNotEmpty","boardState","getAllValidMovesForPlayer","playerColor","validMoves","y","x","getKey","oppositeColor","getNextPlayer","getAllCapturedDisksWithColor","length","neighbors","getAllNeighborsWithColor","capturedDisks","addedDisks","vector","checkedSquare","EMPTY_BOARD_STATE","INITIAL_BOARD_STATE","33","44","34","43","INITIAL_VALID_MOVES","Board","gameStart","isCurrentPlayerHuman","isHuman","setBoardState","setValidMoves","showValidMove","includes","showCapturedDisks","newBoardState","newColor","squaresToBeCaptured","hideCapturedDisks","markedSquares","squareClicked","nextPlayer","possibleMoves","newTotalScore","boardStateArray","totalDisks","blackScore","reduce","sum","changeTotalScore","setTimeout","nextMove","moves","moveKey","captured","maxCapturedValue","Math","max","move","randomMoveIndex","floor","random","getNextMove","clearTimeout","squareState","boardContainer","board","data-player","Header","memo","UserPanel","startGame","robotsNumber","totalScoreBlock","squareBlock","Button","button","actionsBlock","userPanel","middleBlock","App","document","body","classList","add","app","Boolean","window","location","hostname","match","getIcon","player","getNickname","playerNumber","configureStore","curState","getIsHuman","blackIsHuman","whiteIsHuman","configureGameSettingsStore","configurePlayersStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98a8efde.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPanel\":\"UserPanel_userPanel__HC_aB\",\"button\":\"UserPanel_button__3k1dO\",\"middleBlock\":\"UserPanel_middleBlock__TP9TD\",\"totalScoreBlock\":\"UserPanel_totalScoreBlock__Roy3U\",\"enterActive\":\"UserPanel_enterActive__1M_Gt\",\"enterDone\":\"UserPanel_enterDone__2Pw9B\",\"actionsBlock\":\"UserPanel_actionsBlock__5vu2b\",\"enter\":\"UserPanel_enter__24hNT\",\"exit\":\"UserPanel_exit__iNW53\",\"exitActive\":\"UserPanel_exitActive__RtX9S\",\"totalScore\":\"UserPanel_totalScore__3fmfC\",\"squareBlock\":\"UserPanel_squareBlock__1QBMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Disk_wrapper__1qe-e\",\"disk\":\"Disk_disk__ZzxAB\",\"white\":\"Disk_white__21JwF\",\"black\":\"Disk_black__kSe-k\",\"front\":\"Disk_front__2jHMx\",\"back\":\"Disk_back__1NR7I\",\"side\":\"Disk_side__1RV_v\",\"spoke\":\"Disk_spoke__D4k14\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playerCard\":\"PlayerCard_playerCard__3lkue\",\"black\":\"PlayerCard_black__22KkI\",\"white\":\"PlayerCard_white__2WC93\",\"enterActive\":\"PlayerCard_enterActive__10eT0\",\"enterDone\":\"PlayerCard_enterDone__iCe1a\",\"active\":\"PlayerCard_active__2Iv2-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__YakMC\",\"header\":\"Dialog_header__33nxs\",\"content\":\"Dialog_content__1H4fm\",\"closeButton\":\"Dialog_closeButton__1u_Gz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__1AiCK\",\"withMark\":\"Square_withMark__3oTPS\",\"validMove\":\"Square_validMove__2eHfV\",\"mayBeCaptured\":\"Square_mayBeCaptured__3IWs9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boardContainer\":\"Board_boardContainer__3ew5_\",\"board\":\"Board_board__2vvwL\",\"totalScore\":\"Board_totalScore__2IAP_\",\"black\":\"Board_black__3K0FP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2VzCP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2ONRg\"};","var map = {\n\t\"./black-icon.jpg\": 62,\n\t\"./robot-black-icon.png\": 63,\n\t\"./robot-white-icon.png\": 64,\n\t\"./white-icon.jpg\": 65,\n\t\"./wood-bg.jpg\": 66\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 61;","module.exports = __webpack_public_path__ + \"static/media/black-icon.ba59a848.jpg\";","module.exports = __webpack_public_path__ + \"static/media/robot-black-icon.15e05fad.png\";","module.exports = __webpack_public_path__ + \"static/media/robot-white-icon.26ab1b8c.png\";","module.exports = __webpack_public_path__ + \"static/media/white-icon.ba010b87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wood-bg.ac610868.jpg\";","import React from 'react';\r\n\r\nimport styles from './Disk.module.scss';\r\n\r\nconst FACETS = 16;\r\n\r\nexport const Disk = props => {\r\n    const classes = [styles.wrapper, styles[props.color]];\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <div className={styles.disk}>\r\n                <div className={styles.front}/>\r\n                <div className={styles.back}/>\r\n                <div className={styles.side}>\r\n                    {[...Array(FACETS)].map((spoke, i) => {\r\n                        return <div key={i} className={styles.spoke}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {CSSTransition} from 'react-transition-group';\r\n\r\nimport styles from './PlayerCard.module.scss';\r\n\r\nexport const PlayerCard = props => (\r\n    <CSSTransition\r\n        in={props.show}\r\n        timeout={300}\r\n        classNames={{...styles}}\r\n        mountOnEnter\r\n        unmountOnExit>\r\n        <figure className={styles.playerCard + ' ' + styles[props.color]}>\r\n            <div className={props.active ? styles.active : ''}/>\r\n            <img src={require(`../../assets/images/${props.icon}`)} alt={props.color}/>\r\n            <figcaption>{props.nickname}</figcaption>\r\n        </figure>\r\n    </CSSTransition>\r\n);","import React from 'react';\r\nimport {Dialog, DialogContent, DialogContentText, DialogTitle, Grow, IconButton, Typography} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport styles from './Dialog.module.scss';\r\n\r\nconst Transition = React.forwardRef((props, ref) => {\r\n    return <Grow ref={ref} {...props} />;\r\n});\r\n\r\nconst CustomDialogTitle = props => {\r\n    const {children, classes, onClose, ...other} = props;\r\n    return (\r\n        <DialogTitle disableTypography className={styles.header} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={styles.closeButton} onClick={onClose}>\r\n                    <CloseIcon/>\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    );\r\n};\r\n\r\nexport default props => (\r\n    <Dialog\r\n        open={props.isOpen}\r\n        TransitionComponent={Transition}\r\n        className={styles.dialog}\r\n        onClose={props.handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\">\r\n        <CustomDialogTitle id=\"customized-dialog-title\" onClose={props.handleClose}>\r\n            {props.headerText}\r\n        </CustomDialogTitle>\r\n\r\n        <DialogContent className={styles.content} dividers>\r\n            <DialogContentText id=\"alert-dialog-slide-description\">\r\n                {props.children}\r\n            </DialogContentText>\r\n        </DialogContent>\r\n    </Dialog>\r\n);","import {useEffect, useState} from 'react'\r\n\r\nlet globalState = {};\r\nlet listeners = [];\r\nlet actions = {};\r\n\r\nexport const useStore = (shouldListen = true) => {\r\n    const setState = useState(globalState)[1];\r\n\r\n    const dispatch = (actionName, payload) => {\r\n        const newState = actions[actionName](globalState, payload);\r\n        globalState = {...globalState, ...newState};\r\n\r\n        for (const listener of listeners) {\r\n            listener(globalState);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (shouldListen) {\r\n            listeners.push(setState);\r\n        }\r\n\r\n        return () => {\r\n            if (shouldListen) {\r\n                listeners = listeners.filter(li => li !== setState);\r\n            }\r\n        }\r\n    }, [setState, shouldListen]);\r\n\r\n    return [globalState, dispatch];\r\n};\r\n\r\nexport const initStore = (userActions, initialState) => {\r\n    if (initialState) {\r\n        globalState = {...globalState, ...initialState};\r\n        actions = {...actions, ...userActions};\r\n    }\r\n};","import React, {useCallback, useEffect, useState} from 'react';\r\n\r\nimport Dialog from '../../shared/Dialog/Dialog';\r\nimport {useStore} from '../../store/store';\r\n\r\nexport const ResultsDialog = () => {\r\n    const [{totalScore, currentPlayer, players}] = useStore();\r\n    const [showDialog, setShowDialog] = useState(false);\r\n    const [message, setMessage] = useState(null);\r\n\r\n    const getResultsMessage = useCallback(() => {\r\n        if (!totalScore) {\r\n            return;\r\n        }\r\n\r\n        if (totalScore.black > totalScore.white) {\r\n            return `Congratulations! ${players.black.nickname} wins!!`;\r\n        }\r\n        if (totalScore.black < totalScore.white) {\r\n            return `Congratulations! ${players.white.nickname} wins!!`;\r\n        }\r\n\r\n        return 'Surprise! This is a draw.';\r\n    }, [players, totalScore]);\r\n\r\n    const openDialog = useCallback(() => {\r\n        setShowDialog(true);\r\n        setMessage(getResultsMessage());\r\n    }, [getResultsMessage]);\r\n\r\n    const closeDialog = () => {\r\n        setShowDialog(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!currentPlayer) {\r\n            openDialog();\r\n        }\r\n\r\n    }, [currentPlayer, openDialog]);\r\n\r\n    return (\r\n        <Dialog isOpen={showDialog}\r\n                headerText='Results'\r\n                handleClose={closeDialog}>\r\n            {message}\r\n        </Dialog>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport styles from './Square.module.scss';\r\nimport {Disk} from '../Disk/Disk';\r\n\r\nexport const Square = props => {\r\n    const classes = [styles.square];\r\n    if (props.isMarked) {\r\n        classes.push(styles.withMark);\r\n    }\r\n    if (props.isValidMove) {\r\n        classes.push(styles.validMove);\r\n    }\r\n    if (props.mayBeCaptured) {\r\n        classes.push(styles.mayBeCaptured);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            onClick={props.clicked}\r\n            onMouseOver={props.hover}\r\n            onMouseLeave={props.blur}>\r\n            {props.isNotEmpty && <Disk color={props.color}/>}\r\n        </div>\r\n    );\r\n};\r\n","const BOARD_SIZE = 8;\r\n\r\nexport const copyBoardState = (state) => {\r\n    const newState = {...state};\r\n    Object.values(newState).forEach((square) => {\r\n        newState[square.key] = {...square};\r\n    });\r\n\r\n    return newState;\r\n};\r\n\r\nexport const isSquareNotEmpty = (boardState, key) => {\r\n    return !!boardState[key]?.isNotEmpty;\r\n};\r\n\r\nexport const getAllValidMovesForPlayer = (boardState, playerColor) => {\r\n    const validMoves = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n        for (let x = 0; x < BOARD_SIZE; x++) {\r\n            const key = getKey(x, y);\r\n\r\n            if (isSquareNotEmpty(boardState, key)) {\r\n                // skip the already taken squares\r\n                continue;\r\n            }\r\n\r\n            // player will capture disks with a opposite color\r\n            const oppositeColor = getNextPlayer(playerColor);\r\n            const capturedDisks = getAllCapturedDisksWithColor(boardState, key, oppositeColor);\r\n            // check if the player has valid oppositeColor\r\n            if (capturedDisks.length > 0) {\r\n                validMoves.push(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    return validMoves;\r\n};\r\n\r\nexport const getAllCapturedDisksWithColor = (boardState, key, color) => {\r\n    // get all possible directions (neighbors) for capturing disks\r\n    const neighbors = getAllNeighborsWithColor(boardState, key, color);\r\n\r\n    let capturedDisks = [];\r\n    neighbors.forEach((square) => {\r\n        const addedDisks = [];\r\n        // calculate actual direction\r\n        const vector = square.key - key;\r\n\r\n        let checkedSquare = square;\r\n        // looking for a player color disc or an empty square or the end of the board\r\n        while (checkedSquare && checkedSquare.color === square.color) {\r\n            addedDisks.push({...checkedSquare});\r\n            checkedSquare = boardState[checkedSquare.key + vector];\r\n        }\r\n\r\n        if (checkedSquare) {\r\n            // if such a disk is located - add all the passed disks to the array of captured\r\n            capturedDisks = [\r\n                ...capturedDisks,\r\n                ...addedDisks\r\n            ]\r\n        }\r\n    });\r\n\r\n    return capturedDisks;\r\n};\r\n\r\nconst getAllNeighborsWithColor = (boardState, key, color) => {\r\n    const neighbors = [];\r\n    for (let y = -1; y <= 1; y++) {\r\n        for (let x = -1; x <= 1; x++) {\r\n            const vector = getKey(x, y);\r\n            const checkedSquare = boardState[key + vector];\r\n            if (checkedSquare && checkedSquare.key !== key && checkedSquare.color === color) {\r\n                neighbors.push({...checkedSquare})\r\n            }\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nexport const getKey = (x, y) => {\r\n    return x * 10 + y;\r\n};\r\n\r\nexport const getNextPlayer = (currentPlayer) => {\r\n    return currentPlayer === 'black' ? 'white' : 'black';\r\n};","import React, {useState, useEffect, useCallback} from 'react';\r\n\r\nimport styles from './Board.module.scss';\r\nimport {Square} from '../../components';\r\nimport {\r\n    copyBoardState,\r\n    getAllCapturedDisksWithColor,\r\n    getAllValidMovesForPlayer,\r\n    getKey,\r\n    getNextPlayer\r\n} from './board-utils';\r\nimport {getNextMove} from './robot-newbie';\r\nimport {useStore} from '../../store/store';\r\n\r\nconst BOARD_SIZE = 8;\r\nconst EMPTY_BOARD_STATE = {};\r\nconst INITIAL_BOARD_STATE = {\r\n    33: {\r\n        key: 33,\r\n        isNotEmpty: true,\r\n        color: 'white',\r\n        mayBeCaptured: false\r\n    },\r\n    44: {\r\n        key: 44,\r\n        isNotEmpty: true,\r\n        color: 'white',\r\n        mayBeCaptured: false\r\n    },\r\n    34: {\r\n        key: 34,\r\n        isNotEmpty: true,\r\n        color: 'black',\r\n        mayBeCaptured: false\r\n    },\r\n    43: {\r\n        key: 43,\r\n        isNotEmpty: true,\r\n        color: 'black',\r\n        mayBeCaptured: false\r\n    }\r\n};\r\nconst INITIAL_VALID_MOVES = [32, 23, 54, 45];\r\n\r\nexport const Board = () => {\r\n    const [{currentPlayer, gameStart, players}, dispatch] = useStore();\r\n    const isCurrentPlayerHuman = players[currentPlayer]?.isHuman;\r\n\r\n    const [boardState, setBoardState] = useState(EMPTY_BOARD_STATE);\r\n    const [validMoves, setValidMoves] = useState([]);\r\n\r\n    const changeTotalScore = (boardState) => {\r\n        const boardStateArray = Object.values(boardState);\r\n        const totalDisks = boardStateArray.length;\r\n        let blackScore = boardStateArray.reduce((sum, square) => {\r\n            return square.color === 'black' ? sum + 1 : sum;\r\n        }, 0);\r\n\r\n        return {\r\n            black: blackScore,\r\n            white: totalDisks - blackScore\r\n        };\r\n    };\r\n\r\n    const showValidMove = useCallback((key, isHuman) => {\r\n        return isHuman && validMoves.includes(key);\r\n    }, [validMoves]);\r\n\r\n    const showCapturedDisks = (key) => {\r\n        if (!showValidMove(key, isCurrentPlayerHuman)) {\r\n            return;\r\n        }\r\n\r\n        const newBoardState = copyBoardState(boardState);\r\n        const newColor = getNextPlayer(currentPlayer);\r\n        const squaresToBeCaptured = getAllCapturedDisksWithColor(newBoardState, key, newColor);\r\n\r\n        if (squaresToBeCaptured.length === 0) {\r\n            return;\r\n        }\r\n\r\n        squaresToBeCaptured.forEach((square) => {\r\n            newBoardState[square.key].mayBeCaptured = true;\r\n        });\r\n\r\n        setBoardState(newBoardState);\r\n    };\r\n\r\n    const hideCapturedDisks = () => {\r\n        if (!isCurrentPlayerHuman) {\r\n            return;\r\n        }\r\n\r\n        const markedSquares = Object.values(boardState)\r\n            .filter((square) => square.mayBeCaptured === true);\r\n\r\n        if (markedSquares.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const newBoardState = copyBoardState(boardState);\r\n        markedSquares.forEach((square) => {\r\n            newBoardState[square.key].mayBeCaptured = false;\r\n        });\r\n\r\n        setBoardState(newBoardState);\r\n    };\r\n\r\n    const squareClicked = useCallback((key, isHuman) => {\r\n        if (!showValidMove(key, isHuman)) {\r\n            return;\r\n        }\r\n\r\n        let nextPlayer = getNextPlayer(currentPlayer);\r\n        const newBoardState = copyBoardState(boardState);\r\n        const capturedDisks = getAllCapturedDisksWithColor(newBoardState, key, nextPlayer);\r\n\r\n        // add new disk\r\n        newBoardState[key] = {\r\n            key: key,\r\n            isNotEmpty: true,\r\n            color: currentPlayer\r\n        };\r\n\r\n        // change color of captured disks\r\n        capturedDisks.forEach((disk) => {\r\n            newBoardState[disk.key].color = currentPlayer;\r\n            newBoardState[disk.key].mayBeCaptured = false;\r\n        });\r\n\r\n        // update allowable squares for the next player\r\n        let possibleMoves = getAllValidMovesForPlayer(newBoardState, nextPlayer);\r\n\r\n        if (possibleMoves.length === 0) {\r\n            // a player changes only if he has valid moves\r\n            nextPlayer = currentPlayer;\r\n            possibleMoves = getAllValidMovesForPlayer(newBoardState, nextPlayer);\r\n\r\n            if (possibleMoves.length === 0) {\r\n                // if both players cannot move - the game is over\r\n                nextPlayer = null;\r\n            }\r\n        }\r\n\r\n        // provide totalScore to UserPanel\r\n        const newTotalScore = changeTotalScore(newBoardState);\r\n        dispatch('TOTAL_SCORE_CHANGED', newTotalScore);\r\n\r\n        // provide currentPlayer to UserPanel\r\n        dispatch('PLAYER_CHANGED', nextPlayer);\r\n\r\n        setBoardState(newBoardState);\r\n        setValidMoves(possibleMoves);\r\n    }, [currentPlayer, boardState, dispatch, showValidMove]);\r\n\r\n    useEffect(() => {\r\n        // add robot logic\r\n        let timeout;\r\n        if (isCurrentPlayerHuman === false) {\r\n            timeout = setTimeout(() => {\r\n                const nextPlayer = getNextPlayer(currentPlayer);\r\n                const newBoardState = copyBoardState(boardState);\r\n                const nextMove = getNextMove(validMoves, newBoardState, nextPlayer);\r\n\r\n                if (typeof nextMove !== 'number') {\r\n                    return;\r\n                }\r\n\r\n                squareClicked(nextMove, true);\r\n            }, 1000);\r\n        }\r\n\r\n        return () => {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n            }\r\n        }\r\n    }, [currentPlayer, isCurrentPlayerHuman, boardState, validMoves, squareClicked]);\r\n\r\n    useEffect(() => {\r\n        // init game board\r\n        if (gameStart) {\r\n            setBoardState(INITIAL_BOARD_STATE);\r\n            setValidMoves(INITIAL_VALID_MOVES);\r\n        } else {\r\n            setBoardState(EMPTY_BOARD_STATE);\r\n            setValidMoves([]);\r\n        }\r\n    }, [gameStart]);\r\n\r\n    const newBoardState = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n        for (let x = 0; x < BOARD_SIZE; x++) {\r\n            const key = getKey(x, y);\r\n            const squareState = boardState[key];\r\n\r\n            newBoardState.push(\r\n                <Square key={key}\r\n                        isMarked={[2, 6].includes(x) && [2, 6].includes(y)}\r\n                        isValidMove={showValidMove(key, isCurrentPlayerHuman) ? currentPlayer : null}\r\n                        isNotEmpty={squareState?.isNotEmpty}\r\n                        mayBeCaptured={squareState?.mayBeCaptured}\r\n                        color={squareState?.color}\r\n                        hover={() => showCapturedDisks(key)}\r\n                        blur={hideCapturedDisks}\r\n                        clicked={() => squareClicked(key, isCurrentPlayerHuman)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.boardContainer}>\r\n            <div className={styles.board}\r\n                 data-player={currentPlayer}>\r\n                {newBoardState}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import {getAllCapturedDisksWithColor} from './board-utils';\r\n\r\nexport const getNextMove = (possibleMoves, boardState, playerColor) => {\r\n    let moves = [];\r\n    possibleMoves.forEach(\r\n        (moveKey) => {\r\n            const capturedDisks = getAllCapturedDisksWithColor(boardState, moveKey, playerColor);\r\n\r\n            // get number of captured disks for each valid step\r\n            moves.push({\r\n                key: moveKey,\r\n                captured: capturedDisks.length\r\n            });\r\n        }\r\n    );\r\n\r\n    const maxCapturedValue = Math.max(...moves.map(move => move.captured));\r\n\r\n    // get all moves with max number of captured disks\r\n    moves = moves.filter(move => move.captured === maxCapturedValue);\r\n\r\n    if (moves.length > 0) {\r\n        // choose random move the current array\r\n        const randomMoveIndex = Math.floor(Math.random() * moves.length);\r\n        return moves[randomMoveIndex].key;\r\n    } else {\r\n        return null;\r\n    }\r\n};","import React from 'react';\r\n\r\nimport styles from './Header.module.scss';\r\n\r\nexport const Header = React.memo(() => {\r\n    return (\r\n        <header className={styles.header}>Reversi</header>\r\n    );\r\n});","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {CSSTransition} from 'react-transition-group';\r\n\r\nimport styles from './UserPanel.module.scss';\r\nimport {PlayerCard, Square} from '../../components';\r\nimport {useStore} from '../../store/store';\r\n\r\nexport const UserPanel = () => {\r\n    const [{players, currentPlayer, gameStart, totalScore}, dispatch] = useStore();\r\n\r\n    const startGame = (robotsNumber) => {\r\n        dispatch('GAME_START');\r\n        dispatch('INIT_TOTAL_SCORE');\r\n        dispatch('PLAYER_CHANGED', 'black');\r\n        dispatch('SET_ROBOTS', robotsNumber);\r\n    };\r\n\r\n    const endGame = () => {\r\n        dispatch('GAME_END');\r\n    };\r\n\r\n    const totalScoreBlock = (\r\n        <CSSTransition\r\n            in={gameStart}\r\n            timeout={300}\r\n            classNames={{...styles}}\r\n            mountOnEnter\r\n            unmountOnExit>\r\n            <div className={styles.totalScoreBlock}>\r\n                <div className={styles.totalScore}>\r\n                    <div className={styles.squareBlock}>\r\n                        <Square isNotEmpty color={'black'}/>\r\n                        {totalScore?.black}\r\n                    </div>\r\n\r\n                    <div className={styles.squareBlock}>\r\n                        <Square isNotEmpty color={'white'}/>\r\n                        {totalScore?.white}\r\n                    </div>\r\n                </div>\r\n\r\n                <Button className={styles.button}\r\n                        variant=\"outlined\"\r\n                        onClick={endGame}>\r\n                    End game\r\n                </Button>\r\n            </div>\r\n        </CSSTransition>\r\n    );\r\n\r\n    const actionsBlock = (\r\n        <CSSTransition\r\n            in={!gameStart}\r\n            timeout={300}\r\n            classNames={{...styles}}\r\n            mountOnEnter\r\n            unmountOnExit>\r\n            <div className={styles.actionsBlock}>\r\n                <Button className={styles.button}\r\n                        variant=\"outlined\"\r\n                        onClick={() => startGame(1)}>\r\n                    Single player\r\n                </Button>\r\n\r\n                <Button className={styles.button}\r\n                        variant=\"outlined\"\r\n                        onClick={() => startGame(0)}>\r\n                    2 players\r\n                </Button>\r\n\r\n                <Button className={styles.button}\r\n                        variant=\"outlined\"\r\n                        onClick={() => startGame(2)}>\r\n                    Battle of robots\r\n                </Button>\r\n            </div>\r\n        </CSSTransition>\r\n    );\r\n\r\n    return (\r\n        <div className={styles.userPanel}>\r\n            <PlayerCard\r\n                show={gameStart}\r\n                color={'black'}\r\n                active={currentPlayer === 'black'}\r\n                icon={players.black.icon}\r\n                nickname={players.black.nickname}\r\n            />\r\n\r\n            <div className={styles.middleBlock}>\r\n                {totalScoreBlock}\r\n                {actionsBlock}\r\n            </div>\r\n\r\n            <PlayerCard\r\n                show={gameStart}\r\n                color={'white'}\r\n                active={currentPlayer === 'white'}\r\n                icon={players.white.icon}\r\n                nickname={players.white.nickname}\r\n            />\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\n\r\nimport styles from './App.module.scss';\r\nimport {Header, Board, UserPanel} from './containers';\r\nimport {ResultsDialog} from './components';\r\n\r\nconst App = () => {\r\n    document.body.classList.add('green');\r\n    return (\r\n        <div className={styles.app}>\r\n            <Header/>\r\n            <Board/>\r\n            <UserPanel/>\r\n            <ResultsDialog/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {initStore} from './store';\r\n\r\nconst getIcon = (player, isHuman) => {\r\n    const iconStart = isHuman ? '' : 'robot-';\r\n    const iconEnd = isHuman ? '.jpg' : '.png';\r\n\r\n    return iconStart + player + '-icon' + iconEnd;\r\n};\r\n\r\nconst getIsHuman = (robotsNumber) => {\r\n    if (robotsNumber === 0) {\r\n        return [true, true];\r\n    }\r\n\r\n    if (robotsNumber === 1) {\r\n        const isHuman = Math.random() > 0.5 ? 'black' : 'white';\r\n        return [isHuman === 'black', isHuman === 'white'];\r\n    }\r\n\r\n    if (robotsNumber === 2) {\r\n        return [false, false];\r\n    }\r\n\r\n    throw Error('Invalid number of robots!');\r\n};\r\n\r\nconst getNickname = (playerNumber, isHuman, robotsNumber) => {\r\n    if (robotsNumber === 1) {\r\n        return isHuman ? 'Human' : 'Robot';\r\n    }\r\n\r\n    return isHuman ? 'Player ' + playerNumber : 'Robot ' + playerNumber;\r\n};\r\n\r\nconst configureStore = () => {\r\n    const actions = {\r\n        'PLAYER_CHANGED': (curState, player) => {\r\n            return {currentPlayer: player}\r\n        },\r\n        'SET_ROBOTS': (curState, robotsNumber) => {\r\n            const [blackIsHuman, whiteIsHuman] = getIsHuman(robotsNumber);\r\n\r\n            return {\r\n                players: {\r\n                    black: {\r\n                        color: 'black',\r\n                        icon: getIcon('black', blackIsHuman),\r\n                        isHuman: blackIsHuman,\r\n                        nickname: getNickname(1, blackIsHuman, robotsNumber)\r\n                    },\r\n                    white: {\r\n                        color: 'white',\r\n                        icon: getIcon('white', whiteIsHuman),\r\n                        isHuman: whiteIsHuman,\r\n                        nickname: getNickname(2, whiteIsHuman, robotsNumber)\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    };\r\n\r\n    initStore(actions, {\r\n        currentPlayer: 'black',\r\n        players: {\r\n            black: {\r\n                color: 'black',\r\n                icon: 'black-icon.jpg',\r\n                isHuman: true,\r\n                nickname: 'Human'\r\n            },\r\n            white: {\r\n                color: 'white',\r\n                icon: 'robot-white-icon.png',\r\n                isHuman: false,\r\n                nickname: 'Robot'\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\nexport default configureStore;","import {initStore} from './store';\r\n\r\nconst configureStore = () => {\r\n    const actions = {\r\n        'GAME_START': () => {\r\n            return {gameStart: true}\r\n        },\r\n        'GAME_END': () => {\r\n            return {gameStart: false}\r\n        },\r\n        'INIT_TOTAL_SCORE': () => {\r\n            return {\r\n                totalScore: {\r\n                    black: 2,\r\n                    white: 2\r\n                }\r\n            }\r\n        },\r\n        'TOTAL_SCORE_CHANGED': (curState, totalScore) => {\r\n            return {totalScore: totalScore}\r\n        }\r\n    };\r\n\r\n    initStore(actions, {\r\n        gameStart: false\r\n    })\r\n};\r\n\r\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configurePlayersStore from './store/players.store';\nimport configureGameSettingsStore from './store/game-settings.store';\n\nconfigureGameSettingsStore();\nconfigurePlayersStore();\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}