{"version":3,"sources":["components/Disk/Disk.module.scss","components/Square/Square.module.scss","containers/Header/Header.module.scss","containers/Board/Board.module.scss","containers/Header/Header.js","components/Disk/Disk.js","components/Square/Square.js","containers/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","header","Component","disk","props","classes","wrapper","color","join","front","back","side","Array","map","spoke","i","key","square","isMarked","push","withMark","isValidMove","validMove","mayBeCaptured","onClick","clicked","onMouseOver","hover","onMouseLeave","blur","isNotEmpty","Disk","Board","state","currentPlayer","squares","33","44","34","43","totalScore","black","white","validMoves","changeTotalScore","boardState","boardStateArray","Object","values","totalDisks","length","blackScore","reduce","sum","copyBoardState","newState","forEach","isSquareNotEmpty","getAllValidMoves","player","y","x","getKey","oppositeColor","getNextPlayer","getAllCapturedDisksWithColor","neighbors","getAllNeighborsWithColor","capturedDisks","addedDisks","vector","squareToCheck","showCapturedDisks","newBoardState","newColor","squaresToBeCaptured","setState","hideCapturedDisks","squareClicked","includes","nextPlayer","newTotalScore","squareState","Square","board","data-player","this","BG_CLASSES","App","getRandomItemFromArray","arr","document","body","classList","add","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9093ae6e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Disk_wrapper__1qe-e\",\"disk\":\"Disk_disk__ZzxAB\",\"white\":\"Disk_white__21JwF\",\"black\":\"Disk_black__kSe-k\",\"front\":\"Disk_front__2jHMx\",\"back\":\"Disk_back__1NR7I\",\"side\":\"Disk_side__1RV_v\",\"spoke\":\"Disk_spoke__D4k14\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__1AiCK\",\"withMark\":\"Square_withMark__3oTPS\",\"validMove\":\"Square_validMove__2eHfV\",\"mayBeCaptured\":\"Square_mayBeCaptured__3IWs9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2ONRg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__2vvwL\",\"totalScore\":\"Board_totalScore__2IAP_\",\"black\":\"Board_black__3K0FP\"};","import React, {Component} from 'react';\r\n\r\nimport styles from './Header.module.scss';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className={styles.header}>\r\n                Reversi\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport styles from './Disk.module.scss';\r\n\r\nconst FACETS = 32;\r\n\r\nconst disk = (props) => {\r\n    const classes = [styles.wrapper, styles[props.color]];\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <div className={styles.disk}>\r\n                <div className={styles.front}/>\r\n                <div className={styles.back}/>\r\n                <div className={styles.side}>\r\n                    {[...Array(FACETS)].map((spoke, i) => {\r\n                        return <div key={i} className={styles.spoke}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default disk;","import React from 'react';\r\n\r\nimport styles from './Square.module.scss';\r\nimport Disk from '../Disk/Disk';\r\n\r\nconst square = (props) => {\r\n    const classes = [styles.square];\r\n    if (props.isMarked) {\r\n        classes.push(styles.withMark);\r\n    }\r\n    if (props.isValidMove) {\r\n        classes.push(styles.validMove);\r\n    }\r\n    if (props.mayBeCaptured) {\r\n        classes.push(styles.mayBeCaptured);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            onClick={props.clicked}\r\n            onMouseOver={props.hover}\r\n            onMouseLeave={props.blur}\r\n        >\r\n            {props.isNotEmpty && <Disk color={props.color}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default square;\r\n","import React, {Component} from 'react';\r\n\r\nimport styles from './Board.module.scss';\r\nimport Square from '../../components/Square/Square'\r\n\r\nconst BOARD_SIZE = 8;\r\n\r\nclass Board extends Component {\r\n    state = {\r\n        currentPlayer: 'black',\r\n        squares: {\r\n            33: {\r\n                key: 33,\r\n                isNotEmpty: true,\r\n                color: 'white',\r\n                mayBeCaptured: false\r\n            },\r\n            44: {\r\n                key: 44,\r\n                isNotEmpty: true,\r\n                color: 'white',\r\n                mayBeCaptured: false\r\n            },\r\n            34: {\r\n                key: 34,\r\n                isNotEmpty: true,\r\n                color: 'black',\r\n                mayBeCaptured: false\r\n            },\r\n            43: {\r\n                key: 43,\r\n                isNotEmpty: true,\r\n                color: 'black',\r\n                mayBeCaptured: false\r\n            }\r\n        },\r\n        totalScore: {\r\n            black: 2,\r\n            white: 2\r\n        },\r\n        validMoves: [\r\n            32, 23, 54, 45\r\n        ]\r\n    };\r\n\r\n    changeTotalScore = (boardState) => {\r\n        const boardStateArray = Object.values(boardState);\r\n        const totalDisks = boardStateArray.length;\r\n        let blackScore = boardStateArray.reduce((sum, square) => {\r\n            return square.color === 'black' ? sum + 1 : sum;\r\n        }, 0);\r\n\r\n        return {\r\n            black: blackScore,\r\n            white: totalDisks - blackScore\r\n        };\r\n    };\r\n\r\n    copyBoardState = (state) => {\r\n        const newState = {...state};\r\n        Object.values(newState).forEach((square) => {\r\n            newState[square.key] = {...square};\r\n        });\r\n\r\n        return newState;\r\n    };\r\n\r\n    isSquareNotEmpty = (key) => {\r\n        return !!this.state.squares[key]?.isNotEmpty;\r\n    };\r\n\r\n    getAllValidMoves = (boardState, player) => {\r\n        const validMoves = [];\r\n        for (let y = 0; y < BOARD_SIZE; y++) {\r\n            for (let x = 0; x < BOARD_SIZE; x++) {\r\n                const key = this.getKey(x, y);\r\n\r\n                if (this.isSquareNotEmpty(key)) {\r\n                    // skip the already taken squares\r\n                    continue;\r\n                }\r\n\r\n                const oppositeColor = this.getNextPlayer(player);\r\n                const capturedDisks = this.getAllCapturedDisksWithColor(boardState, key, oppositeColor);\r\n                // check if the player has valid moves\r\n                if (capturedDisks.length > 0) {\r\n                    validMoves.push(key);\r\n                }\r\n            }\r\n        }\r\n\r\n        return validMoves;\r\n    };\r\n\r\n\r\n    getAllCapturedDisksWithColor = (boardState, key, color) => {\r\n        // get all possible directions (neighbors) for capturing disks\r\n        const neighbors = this.getAllNeighborsWithColor(boardState, key, color);\r\n\r\n        let capturedDisks = [];\r\n        neighbors.forEach((square) => {\r\n            const addedDisks = [];\r\n            // calculate actual direction\r\n            const vector = square.key - key;\r\n\r\n            let squareToCheck = square;\r\n            // looking for a player color disc or an empty square or the end of the board\r\n            while (squareToCheck && squareToCheck.color === square.color) {\r\n                addedDisks.push({...squareToCheck});\r\n                squareToCheck = boardState[squareToCheck.key + vector];\r\n            }\r\n\r\n            if (squareToCheck) {\r\n                // if such a disk is located - add all the passed disks to the array of captured\r\n                capturedDisks = [\r\n                    ...capturedDisks,\r\n                    ...addedDisks\r\n                ]\r\n            }\r\n        });\r\n\r\n        return capturedDisks;\r\n    };\r\n\r\n    getAllNeighborsWithColor = (boardState, key, color) => {\r\n        const neighbors = [];\r\n        for (let y = -1; y <= 1; y++) {\r\n            for (let x = -1; x <= 1; x++) {\r\n                const vector = this.getKey(x, y);\r\n                const square = boardState[key + vector];\r\n                if (square && square.key !== key && square.color === color) {\r\n                    neighbors.push({...square})\r\n                }\r\n            }\r\n        }\r\n\r\n        return neighbors;\r\n    };\r\n\r\n    getKey = (x, y) => {\r\n        return x * 10 + y;\r\n    };\r\n\r\n    getNextPlayer = (currentPlayer) => {\r\n        return currentPlayer === 'black' ? 'white' : 'black';\r\n    };\r\n\r\n    showCapturedDisks = (key) => {\r\n        if (this.isSquareNotEmpty(key)) {\r\n            return;\r\n        }\r\n\r\n        const newBoardState = this.copyBoardState(this.state.squares);\r\n        const newColor = this.getNextPlayer(this.state.currentPlayer);\r\n        const squaresToBeCaptured = this.getAllCapturedDisksWithColor(newBoardState, key, newColor);\r\n\r\n        if (!squaresToBeCaptured.length) {\r\n            return;\r\n        }\r\n\r\n        squaresToBeCaptured.forEach((square) => {\r\n            newBoardState[square.key].mayBeCaptured = true;\r\n        });\r\n\r\n        this.setState({\r\n            squares: newBoardState\r\n        });\r\n    };\r\n\r\n    hideCapturedDisks = () => {\r\n        const newBoardState = this.copyBoardState(this.state.squares);\r\n        Object.values(newBoardState).forEach((square) => {\r\n            square.mayBeCaptured = false;\r\n        });\r\n\r\n        this.setState({\r\n            squares: newBoardState\r\n        });\r\n    };\r\n\r\n    squareClicked = (key) => {\r\n        if (!this.state.validMoves.includes(key)) {\r\n            return;\r\n        }\r\n\r\n        let nextPlayer = this.getNextPlayer(this.state.currentPlayer);\r\n        const newBoardState = this.copyBoardState(this.state.squares);\r\n        const capturedDisks = this.getAllCapturedDisksWithColor(newBoardState, key, nextPlayer);\r\n\r\n        // add new disk\r\n        newBoardState[key] = {\r\n            key: key,\r\n            isNotEmpty: true,\r\n            color: this.state.currentPlayer\r\n        };\r\n\r\n        // change color of captured disks\r\n        capturedDisks.forEach((disk) => {\r\n            newBoardState[disk.key].color = this.state.currentPlayer;\r\n            newBoardState[disk.key].mayBeCaptured = false;\r\n        });\r\n\r\n        // update allowable squares for the next player\r\n        let validMoves = this.getAllValidMoves(newBoardState, nextPlayer);\r\n\r\n        if (!validMoves.length) {\r\n            // a player changes only if he has valid moves\r\n            nextPlayer = this.getNextPlayer(nextPlayer);\r\n            validMoves = this.getAllValidMoves(newBoardState, nextPlayer);\r\n\r\n            if (!validMoves.length) {\r\n                // if both players cannot move - the game is over\r\n                nextPlayer = null;\r\n            }\r\n        }\r\n\r\n        const newTotalScore = this.changeTotalScore(newBoardState);\r\n\r\n        this.setState({\r\n            currentPlayer: nextPlayer,\r\n            squares: newBoardState,\r\n            totalScore: newTotalScore,\r\n            validMoves: validMoves\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const squares = [];\r\n        for (let y = 0; y < BOARD_SIZE; y++) {\r\n            for (let x = 0; x < BOARD_SIZE; x++) {\r\n                const key = this.getKey(x, y);\r\n                const squareState = this.state.squares[key];\r\n\r\n                squares.push(\r\n                    <Square isMarked={[2, 6].includes(x) && [2, 6].includes(y)}\r\n                            key={key}\r\n                            isValidMove={this.state.validMoves.includes(key) ? this.state.currentPlayer : null}\r\n                            isNotEmpty={squareState?.isNotEmpty}\r\n                            mayBeCaptured={squareState?.mayBeCaptured}\r\n                            color={squareState?.color}\r\n                            hover={() => this.showCapturedDisks(key)}\r\n                            blur={() => this.hideCapturedDisks(key)}\r\n                            clicked={() => this.squareClicked(key)}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/*<div className={styles.totalScore}>*/}\r\n                    {/*<div className={styles.black}>*/}\r\n                    {/*    <Square isNotEmpty*/}\r\n                    {/*            color={'black'}/>*/}\r\n                    {/*    {this.state.totalScore.black}*/}\r\n                    {/*</div>*/}\r\n                    {/*{this.state.totalScore.black + ' : ' + this.state.totalScore.white}*/}\r\n                {/*</div>*/}\r\n                <div className={styles.board}\r\n                     data-player={this.state.currentPlayer}>\r\n                    {squares}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React, {Component} from 'react';\n\nimport './App.scss';\nimport Header from './containers/Header/Header';\nimport Board from './containers/Board/Board';\n\nconst BG_CLASSES = ['blue', 'green'];\n\nclass App extends Component {\n    getRandomItemFromArray = (arr) => {\n        // const index = Math.floor(Math.random() * arr.length);\n        // return arr[index];\n        return 'green';\n    };\n\n    render() {\n        document.body.classList.add(this.getRandomItemFromArray(BG_CLASSES));\n        return (\n            <div className=\"app\">\n                <Header/>\n                <Board/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}