{"version":3,"sources":["containers/UserPanel/UserPanel.module.scss","components/Disk/Disk.module.scss","components/Square/Square.module.scss","containers/Board/Board.module.scss","assets/images sync /^/.*$","containers/Header/Header.module.scss","assets/images/black-icon.jpg","assets/images/robot-black-icon.png","assets/images/robot-white-icon.png","assets/images/white-icon.jpg","assets/images/wood-bg.jpg","containers/Header/Header.js","components/Disk/Disk.js","components/Square/Square.js","containers/Board/board-utils.js","store/store.js","containers/Board/Board.js","containers/Board/robot-newbie.js","containers/UserPanel/UserPanel.js","App.js","serviceWorker.js","store/players.store.js","store/game-settings.store.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","React","memo","className","styles","header","disk","props","classes","wrapper","color","join","front","back","side","Array","spoke","i","key","Square","square","isMarked","push","withMark","isValidMove","validMove","mayBeCaptured","onClick","clicked","onMouseOver","hover","onMouseLeave","blur","isNotEmpty","Disk","copyBoardState","state","newState","values","forEach","isSquareNotEmpty","boardState","getAllValidMovesForPlayer","playerColor","validMoves","y","x","getKey","oppositeColor","getNextPlayer","getAllCapturedDisksWithColor","length","neighbors","getAllNeighborsWithColor","capturedDisks","addedDisks","vector","checkedSquare","currentPlayer","globalState","listeners","actions","useStore","shouldListen","setState","useState","dispatch","actionName","payload","listener","useEffect","filter","li","initStore","userActions","initialState","EMPTY_BOARD_STATE","INITIAL_BOARD_STATE","33","44","34","43","INITIAL_VALID_MOVES","Board","gameStart","players","isCurrentPlayerHuman","isHuman","setBoardState","setValidMoves","showValidMove","includes","showCapturedDisks","newBoardState","newColor","squaresToBeCaptured","hideCapturedDisks","markedSquares","squareClicked","useCallback","nextPlayer","possibleMoves","newTotalScore","boardStateArray","totalDisks","blackScore","reduce","sum","black","white","changeTotalScore","timeout","nextMove","moves","moveKey","captured","maxCapturedValue","Math","max","move","randomMoveIndex","floor","random","getNextMove","setTimeout","clearTimeout","squareState","boardContainer","board","data-player","UserPanel","totalScore","startGame","robotsNumber","totalScoreBlock","squareBlock","Button","button","variant","actionsBlock","leftPlayerBlock","playerBlock","active","src","require","icon","alt","nickname","rightPlayerBlock","userPanel","BG_CLASSES","App","getRandomItemFromArray","arr","document","body","classList","add","this","Component","Boolean","window","location","hostname","match","getIcon","player","getNickname","playerNumber","configureStore","curState","getIsHuman","blackIsHuman","whiteIsHuman","configureGameSettingsStore","configurePlayersStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.278b48f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPanel\":\"UserPanel_userPanel__17Uax\",\"playerBlock\":\"UserPanel_playerBlock__2lzI5\",\"black\":\"UserPanel_black__1FBk9\",\"white\":\"UserPanel_white__1bEQB\",\"active\":\"UserPanel_active__3Op97\",\"button\":\"UserPanel_button__a0T5y\",\"totalScoreBlock\":\"UserPanel_totalScoreBlock__7qDrh\",\"actionsBlock\":\"UserPanel_actionsBlock__dEdlg\",\"totalScore\":\"UserPanel_totalScore__r7Keb\",\"squareBlock\":\"UserPanel_squareBlock__1fxwg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Disk_wrapper__OwhBK\",\"disk\":\"Disk_disk__1TlKI\",\"white\":\"Disk_white__1z3Yk\",\"black\":\"Disk_black__MPWog\",\"front\":\"Disk_front__2JsQK\",\"back\":\"Disk_back__3pBu3\",\"side\":\"Disk_side__2mM_z\",\"spoke\":\"Disk_spoke__2D34J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"square\":\"Square_square__em0kJ\",\"withMark\":\"Square_withMark__1Gl8p\",\"validMove\":\"Square_validMove__3UYGN\",\"mayBeCaptured\":\"Square_mayBeCaptured__1ZN2h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boardContainer\":\"Board_boardContainer__3-1bJ\",\"board\":\"Board_board__1BmnP\",\"totalScore\":\"Board_totalScore__1L73Q\",\"black\":\"Board_black__oGcPC\"};","var map = {\n\t\"./black-icon.jpg\": 35,\n\t\"./robot-black-icon.png\": 36,\n\t\"./robot-white-icon.png\": 37,\n\t\"./white-icon.jpg\": 38,\n\t\"./wood-bg.jpg\": 39\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3yAwo\"};","module.exports = __webpack_public_path__ + \"static/media/black-icon.ba59a848.jpg\";","module.exports = __webpack_public_path__ + \"static/media/robot-black-icon.15e05fad.png\";","module.exports = __webpack_public_path__ + \"static/media/robot-white-icon.26ab1b8c.png\";","module.exports = __webpack_public_path__ + \"static/media/white-icon.ba010b87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wood-bg.ac610868.jpg\";","import React from 'react';\r\n\r\nimport styles from './Header.module.scss';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={styles.header}>Reversi</header>\r\n    );\r\n};\r\n\r\nexport default React.memo(Header);","import React from 'react';\r\n\r\nimport styles from './Disk.module.scss';\r\n\r\nconst FACETS = 32;\r\n\r\nconst disk = (props) => {\r\n    const classes = [styles.wrapper, styles[props.color]];\r\n\r\n    return (\r\n        <div className={classes.join(' ')}>\r\n            <div className={styles.disk}>\r\n                <div className={styles.front}/>\r\n                <div className={styles.back}/>\r\n                <div className={styles.side}>\r\n                    {[...Array(FACETS)].map((spoke, i) => {\r\n                        return <div key={i} className={styles.spoke}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default disk;","import React from 'react';\r\n\r\nimport styles from './Square.module.scss';\r\nimport Disk from '../Disk/Disk';\r\n\r\nconst Square = props => {\r\n    const classes = [styles.square];\r\n    if (props.isMarked) {\r\n        classes.push(styles.withMark);\r\n    }\r\n    if (props.isValidMove) {\r\n        classes.push(styles.validMove);\r\n    }\r\n    if (props.mayBeCaptured) {\r\n        classes.push(styles.mayBeCaptured);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n            onClick={props.clicked}\r\n            onMouseOver={props.hover}\r\n            onMouseLeave={props.blur}\r\n        >\r\n            {props.isNotEmpty && <Disk color={props.color}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Square;\r\n","const BOARD_SIZE = 8;\r\n\r\nexport const copyBoardState = (state) => {\r\n    const newState = {...state};\r\n    Object.values(newState).forEach((square) => {\r\n        newState[square.key] = {...square};\r\n    });\r\n\r\n    return newState;\r\n};\r\n\r\nexport const isSquareNotEmpty = (boardState, key) => {\r\n    return !!boardState[key]?.isNotEmpty;\r\n};\r\n\r\nexport const getAllValidMovesForPlayer = (boardState, playerColor) => {\r\n    const validMoves = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n        for (let x = 0; x < BOARD_SIZE; x++) {\r\n            const key = getKey(x, y);\r\n\r\n            if (isSquareNotEmpty(boardState, key)) {\r\n                // skip the already taken squares\r\n                continue;\r\n            }\r\n\r\n            // player will capture disks with a opposite color\r\n            const oppositeColor = getNextPlayer(playerColor);\r\n            const capturedDisks = getAllCapturedDisksWithColor(boardState, key, oppositeColor);\r\n            // check if the player has valid oppositeColor\r\n            if (capturedDisks.length > 0) {\r\n                validMoves.push(key);\r\n            }\r\n        }\r\n    }\r\n\r\n    return validMoves;\r\n};\r\n\r\nexport const getAllCapturedDisksWithColor = (boardState, key, color) => {\r\n    // get all possible directions (neighbors) for capturing disks\r\n    const neighbors = getAllNeighborsWithColor(boardState, key, color);\r\n\r\n    let capturedDisks = [];\r\n    neighbors.forEach((square) => {\r\n        const addedDisks = [];\r\n        // calculate actual direction\r\n        const vector = square.key - key;\r\n\r\n        let checkedSquare = square;\r\n        // looking for a player color disc or an empty square or the end of the board\r\n        while (checkedSquare && checkedSquare.color === square.color) {\r\n            addedDisks.push({...checkedSquare});\r\n            checkedSquare = boardState[checkedSquare.key + vector];\r\n        }\r\n\r\n        if (checkedSquare) {\r\n            // if such a disk is located - add all the passed disks to the array of captured\r\n            capturedDisks = [\r\n                ...capturedDisks,\r\n                ...addedDisks\r\n            ]\r\n        }\r\n    });\r\n\r\n    return capturedDisks;\r\n};\r\n\r\nconst getAllNeighborsWithColor = (boardState, key, color) => {\r\n    const neighbors = [];\r\n    for (let y = -1; y <= 1; y++) {\r\n        for (let x = -1; x <= 1; x++) {\r\n            const vector = getKey(x, y);\r\n            const checkedSquare = boardState[key + vector];\r\n            if (checkedSquare && checkedSquare.key !== key && checkedSquare.color === color) {\r\n                neighbors.push({...checkedSquare})\r\n            }\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nexport const getKey = (x, y) => {\r\n    return x * 10 + y;\r\n};\r\n\r\nexport const getNextPlayer = (currentPlayer) => {\r\n    return currentPlayer === 'black' ? 'white' : 'black';\r\n};","import {useEffect, useState} from 'react'\r\n\r\nlet globalState = {};\r\nlet listeners = [];\r\nlet actions = {};\r\n\r\nexport const useStore = (shouldListen = true) => {\r\n    const setState = useState(globalState)[1];\r\n\r\n    const dispatch = (actionName, payload) => {\r\n        const newState = actions[actionName](globalState, payload);\r\n        globalState = {...globalState, ...newState};\r\n\r\n        for (const listener of listeners) {\r\n            listener(globalState);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (shouldListen) {\r\n            listeners.push(setState);\r\n        }\r\n\r\n        return () => {\r\n            if (shouldListen) {\r\n                listeners = listeners.filter(li => li !== setState);\r\n            }\r\n        }\r\n    }, [setState, shouldListen]);\r\n\r\n    return [globalState, dispatch];\r\n};\r\n\r\nexport const initStore = (userActions, initialState) => {\r\n    if (initialState) {\r\n        globalState = {...globalState, ...initialState};\r\n        actions = {...actions, ...userActions};\r\n    }\r\n};","import React, {useState, useEffect, useCallback} from 'react';\r\n\r\nimport styles from './Board.module.scss';\r\nimport Square from '../../components/Square/Square';\r\nimport {\r\n    copyBoardState, getAllCapturedDisksWithColor, getAllValidMovesForPlayer, getKey, getNextPlayer\r\n} from './board-utils';\r\nimport {getNextMove} from './robot-newbie';\r\nimport {useStore} from '../../store/store';\r\n\r\nconst BOARD_SIZE = 8;\r\nconst EMPTY_BOARD_STATE = {};\r\nconst INITIAL_BOARD_STATE = {\r\n    33: {\r\n        key: 33,\r\n        isNotEmpty: true,\r\n        color: 'white',\r\n        mayBeCaptured: false\r\n    },\r\n    44: {\r\n        key: 44,\r\n        isNotEmpty: true,\r\n        color: 'white',\r\n        mayBeCaptured: false\r\n    },\r\n    34: {\r\n        key: 34,\r\n        isNotEmpty: true,\r\n        color: 'black',\r\n        mayBeCaptured: false\r\n    },\r\n    43: {\r\n        key: 43,\r\n        isNotEmpty: true,\r\n        color: 'black',\r\n        mayBeCaptured: false\r\n    }\r\n};\r\nconst INITIAL_VALID_MOVES = [32, 23, 54, 45];\r\n\r\nconst Board = () => {\r\n    const [{currentPlayer, gameStart, players}, dispatch] = useStore();\r\n    const isCurrentPlayerHuman = players[currentPlayer]?.isHuman;\r\n\r\n    const [boardState, setBoardState] = useState(INITIAL_BOARD_STATE);\r\n    const [validMoves, setValidMoves] = useState(INITIAL_VALID_MOVES);\r\n\r\n    const changeTotalScore = (boardState) => {\r\n        const boardStateArray = Object.values(boardState);\r\n        const totalDisks = boardStateArray.length;\r\n        let blackScore = boardStateArray.reduce((sum, square) => {\r\n            return square.color === 'black' ? sum + 1 : sum;\r\n        }, 0);\r\n\r\n        return {\r\n            black: blackScore,\r\n            white: totalDisks - blackScore\r\n        };\r\n    };\r\n\r\n    const showValidMove = (key) => {\r\n        return isCurrentPlayerHuman && validMoves.includes(key);\r\n    };\r\n\r\n    const showCapturedDisks = (key) => {\r\n        if (!showValidMove(key)) {\r\n            return;\r\n        }\r\n\r\n        const newBoardState = copyBoardState(boardState);\r\n        const newColor = getNextPlayer(currentPlayer);\r\n        const squaresToBeCaptured = getAllCapturedDisksWithColor(newBoardState, key, newColor);\r\n\r\n        if (squaresToBeCaptured.length === 0) {\r\n            return;\r\n        }\r\n\r\n        squaresToBeCaptured.forEach((square) => {\r\n            newBoardState[square.key].mayBeCaptured = true;\r\n        });\r\n\r\n        setBoardState(newBoardState);\r\n    };\r\n\r\n    const hideCapturedDisks = () => {\r\n        if (!isCurrentPlayerHuman) {\r\n            return;\r\n        }\r\n\r\n        const markedSquares = Object.values(boardState)\r\n            .filter((square) => square.mayBeCaptured === true);\r\n\r\n        if (markedSquares.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const newBoardState = copyBoardState(boardState);\r\n        markedSquares.forEach((square) => {\r\n            newBoardState[square.key].mayBeCaptured = false;\r\n        });\r\n\r\n        setBoardState(newBoardState);\r\n    };\r\n\r\n    const squareClicked = useCallback((key, isCurrentPlayerHuman) => {\r\n        if (!isCurrentPlayerHuman || !validMoves.includes(key)) {\r\n            return;\r\n        }\r\n\r\n        let nextPlayer = getNextPlayer(currentPlayer);\r\n        const newBoardState = copyBoardState(boardState);\r\n        const capturedDisks = getAllCapturedDisksWithColor(newBoardState, key, nextPlayer);\r\n\r\n        // add new disk\r\n        newBoardState[key] = {\r\n            key: key,\r\n            isNotEmpty: true,\r\n            color: currentPlayer\r\n        };\r\n\r\n        // change color of captured disks\r\n        capturedDisks.forEach((disk) => {\r\n            newBoardState[disk.key].color = currentPlayer;\r\n            newBoardState[disk.key].mayBeCaptured = false;\r\n        });\r\n\r\n        // update allowable squares for the next player\r\n        let possibleMoves = getAllValidMovesForPlayer(newBoardState, nextPlayer);\r\n\r\n        if (possibleMoves.length === 0) {\r\n            // a player changes only if he has valid moves\r\n            nextPlayer = currentPlayer;\r\n            possibleMoves = getAllValidMovesForPlayer(newBoardState, nextPlayer);\r\n\r\n            if (possibleMoves.length === 0) {\r\n                // if both players cannot move - the game is over\r\n                nextPlayer = null;\r\n            }\r\n        }\r\n\r\n        // provide totalScore to UserPanel\r\n        const newTotalScore = changeTotalScore(newBoardState);\r\n        dispatch('TOTAL_SCORE_CHANGED', newTotalScore);\r\n\r\n        // provide currentPlayer to UserPanel\r\n        dispatch('PLAYER_CHANGED', nextPlayer);\r\n\r\n        setBoardState(newBoardState);\r\n        setValidMoves(possibleMoves);\r\n    }, [currentPlayer, validMoves, boardState, dispatch]);\r\n\r\n    useEffect(() => {\r\n        let timeout;\r\n        if (isCurrentPlayerHuman === false) {\r\n            const nextPlayer = getNextPlayer(currentPlayer);\r\n            const newBoardState = copyBoardState(boardState);\r\n\r\n            const nextMove = getNextMove(validMoves, newBoardState, nextPlayer);\r\n            if (typeof nextMove !== 'number') {\r\n                return;\r\n            }\r\n\r\n            timeout = setTimeout(() => {\r\n                squareClicked(nextMove, true);\r\n            }, 1000);\r\n        }\r\n\r\n        return () => {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n            }\r\n        }\r\n    }, [currentPlayer, isCurrentPlayerHuman, boardState, validMoves, squareClicked]);\r\n\r\n    useEffect(() => {\r\n        if (gameStart) {\r\n            setBoardState(INITIAL_BOARD_STATE);\r\n            setValidMoves(INITIAL_VALID_MOVES);\r\n        } else {\r\n            setBoardState(EMPTY_BOARD_STATE);\r\n            setValidMoves([]);\r\n        }\r\n    }, [gameStart]);\r\n\r\n    const newBoardState = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n        for (let x = 0; x < BOARD_SIZE; x++) {\r\n            const key = getKey(x, y);\r\n            const squareState = boardState[key];\r\n\r\n            newBoardState.push(\r\n                <Square key={key}\r\n                        isMarked={[2, 6].includes(x) && [2, 6].includes(y)}\r\n                        isValidMove={showValidMove(key) ? currentPlayer : null}\r\n                        isNotEmpty={squareState?.isNotEmpty}\r\n                        mayBeCaptured={squareState?.mayBeCaptured}\r\n                        color={squareState?.color}\r\n                        hover={() => showCapturedDisks(key)}\r\n                        blur={hideCapturedDisks}\r\n                        clicked={() => squareClicked(key, isCurrentPlayerHuman)}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.boardContainer}>\r\n            <div className={styles.board}\r\n                 data-player={currentPlayer}>\r\n                {newBoardState}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import {getAllCapturedDisksWithColor} from './board-utils';\r\n\r\nexport const getNextMove = (possibleMoves, boardState, playerColor) => {\r\n    let moves = [];\r\n    possibleMoves.forEach(\r\n        (moveKey) => {\r\n            const capturedDisks = getAllCapturedDisksWithColor(boardState, moveKey, playerColor);\r\n\r\n            // get number of captured disks for each valid step\r\n            moves.push({\r\n                key: moveKey,\r\n                captured: capturedDisks.length\r\n            });\r\n        }\r\n    );\r\n\r\n    const maxCapturedValue = Math.max(...moves.map(move => move.captured));\r\n\r\n    // get all moves with max number of captured disks\r\n    moves = moves.filter(move => move.captured === maxCapturedValue);\r\n\r\n    if (moves.length > 0) {\r\n        // choose random move the current array\r\n        const randomMoveIndex = Math.floor(Math.random() * moves.length);\r\n        return moves[randomMoveIndex].key;\r\n    } else {\r\n        return null;\r\n    }\r\n};","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport styles from './UserPanel.module.scss';\r\nimport Square from '../../components/Square/Square';\r\nimport {useStore} from '../../store/store';\r\n\r\nconst UserPanel = () => {\r\n    const [{players, currentPlayer, gameStart, totalScore}, dispatch] = useStore();\r\n\r\n    const startGame = (robotsNumber) => {\r\n        dispatch('GAME_START');\r\n        dispatch('INIT_TOTAL_SCORE');\r\n        dispatch('PLAYER_CHANGED', 'black');\r\n        dispatch('SET_ROBOTS', robotsNumber);\r\n    };\r\n\r\n    const endGame = () => {\r\n        dispatch('GAME_END');\r\n    };\r\n\r\n    const totalScoreBlock = (\r\n        <div className={styles.totalScoreBlock}>\r\n            <div className={styles.totalScore}>\r\n                <div className={styles.squareBlock}>\r\n                    <Square isNotEmpty color={'black'}/>\r\n                    {totalScore?.black}\r\n                </div>\r\n\r\n                <div className={styles.squareBlock}>\r\n                    <Square isNotEmpty color={'white'}/>\r\n                    {totalScore?.white}\r\n                </div>\r\n            </div>\r\n\r\n            <Button className={styles.button}\r\n                    variant=\"outlined\"\r\n                    onClick={endGame}>\r\n                End game\r\n            </Button>\r\n        </div>\r\n    );\r\n\r\n    const actionsBlock = (\r\n        <div className={styles.actionsBlock}>\r\n            <Button className={styles.button}\r\n                    variant=\"outlined\"\r\n                    onClick={() => startGame(1)}>\r\n                Single player\r\n            </Button>\r\n\r\n            <Button className={styles.button}\r\n                    variant=\"outlined\"\r\n                    onClick={() => startGame(0)}>\r\n                2 players\r\n            </Button>\r\n\r\n            <Button className={styles.button}\r\n                    variant=\"outlined\"\r\n                    onClick={() => startGame(2)}>\r\n                Battle of robots\r\n            </Button>\r\n        </div>\r\n    );\r\n\r\n    const leftPlayerBlock = (\r\n        <figure className={[styles.playerBlock, styles.black, currentPlayer === 'black' ? styles.active : ''].join(' ')}>\r\n            <img src={require(`../../assets/images/${players.black.icon}`)} alt=\"black\"/>\r\n            <figcaption>{players.black.nickname}</figcaption>\r\n        </figure>\r\n    );\r\n\r\n    const rightPlayerBlock = (\r\n        <figure className={[styles.playerBlock, styles.white, currentPlayer === 'white' ? styles.active : ''].join(' ')}>\r\n            <img src={require(`../../assets/images/${players.white.icon}`)} alt=\"white\"/>\r\n            <figcaption>{players.white.nickname}</figcaption>\r\n        </figure>\r\n    );\r\n\r\n    return (\r\n        <div className={styles.userPanel}>\r\n            {gameStart && leftPlayerBlock}\r\n            {gameStart ? totalScoreBlock : actionsBlock}\r\n            {gameStart && rightPlayerBlock}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserPanel;","import React, {Component} from 'react';\r\n\r\nimport './App.scss';\r\nimport Header from './containers/Header/Header';\r\nimport Board from './containers/Board/Board';\r\nimport UserPanel from './containers/UserPanel/UserPanel';\r\n\r\nconst BG_CLASSES = ['green']; // ['blue', 'green']\r\n\r\nclass App extends Component {\r\n    getRandomItemFromArray = (arr) => {\r\n        const index = Math.floor(Math.random() * arr.length);\r\n        return arr[index];\r\n    };\r\n\r\n    render() {\r\n        document.body.classList.add(this.getRandomItemFromArray(BG_CLASSES));\r\n        return (\r\n            <div className=\"app\">\r\n                <Header/>\r\n                <Board/>\r\n                <UserPanel/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {initStore} from './store';\r\n\r\nconst getIcon = (player, isHuman) => {\r\n    const iconStart = isHuman ? '' : 'robot-';\r\n    const iconEnd = isHuman ? '.jpg' : '.png';\r\n\r\n    return iconStart + player + '-icon' + iconEnd;\r\n};\r\n\r\nconst getIsHuman = (robotsNumber) => {\r\n    if (robotsNumber === 0) {\r\n        return [true, true];\r\n    }\r\n\r\n    if (robotsNumber === 1) {\r\n        const isHuman = Math.random() > 0.5 ? 'black' : 'white';\r\n        return [isHuman === 'black', isHuman === 'white'];\r\n    }\r\n\r\n    if (robotsNumber === 2) {\r\n        return [false, false];\r\n    }\r\n\r\n    throw Error('Invalid number of robots!');\r\n};\r\n\r\nconst getNickname = (playerNumber, isHuman, robotsNumber) => {\r\n    if (robotsNumber === 1) {\r\n        return isHuman ? 'Human' : 'Robot';\r\n    }\r\n\r\n    return isHuman ? 'Player ' + playerNumber : 'Robot ' + playerNumber;\r\n};\r\n\r\nconst configureStore = () => {\r\n    const actions = {\r\n        'PLAYER_CHANGED': (curState, player) => {\r\n            return {currentPlayer: player}\r\n        },\r\n        'SET_ROBOTS': (curState, robotsNumber) => {\r\n            const [blackIsHuman, whiteIsHuman] = getIsHuman(robotsNumber);\r\n\r\n            return {\r\n                players: {\r\n                    black: {\r\n                        color: 'black',\r\n                        icon: getIcon('black', blackIsHuman),\r\n                        isHuman: blackIsHuman,\r\n                        nickname: getNickname(1, blackIsHuman, robotsNumber)\r\n                    },\r\n                    white: {\r\n                        color: 'white',\r\n                        icon: getIcon('white', whiteIsHuman),\r\n                        isHuman: whiteIsHuman,\r\n                        nickname: getNickname(2, whiteIsHuman, robotsNumber)\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    };\r\n\r\n    initStore(actions, {\r\n        currentPlayer: 'black',\r\n        players: {\r\n            black: {\r\n                color: 'black',\r\n                icon: 'black-icon.jpg',\r\n                isHuman: true,\r\n                nickname: 'Human'\r\n            },\r\n            white: {\r\n                color: 'white',\r\n                icon: 'robot-white-icon.png',\r\n                isHuman: false,\r\n                nickname: 'Robot'\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\nexport default configureStore;","import {initStore} from './store';\r\n\r\nconst configureStore = () => {\r\n    const actions = {\r\n        'GAME_START': () => {\r\n            return {gameStart: true}\r\n        },\r\n        'GAME_END': () => {\r\n            return {gameStart: false}\r\n        },\r\n        'INIT_TOTAL_SCORE': () => {\r\n            return {\r\n                totalScore: {\r\n                    black: 2,\r\n                    white: 2\r\n                }\r\n            }\r\n        },\r\n        'TOTAL_SCORE_CHANGED': (curState, totalScore) => {\r\n            return {totalScore: totalScore}\r\n        }\r\n    };\r\n\r\n    initStore(actions, {\r\n        gameStart: false\r\n    })\r\n};\r\n\r\nexport default configureStore;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configurePlayersStore from './store/players.store';\r\nimport configureGameSettingsStore from './store/game-settings.store';\r\n\r\nconfigureGameSettingsStore();\r\nconfigurePlayersStore();\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}